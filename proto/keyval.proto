syntax = "proto3";

package apidefinitions.keyval;

option go_package = "github.com/api-definitions/keyval/go/keyvalpb";

// A simple key-value storage service
service KeyValueService {
  // Provides a value for each key request
  rpc HasValue (HasValueRequest) returns (HasValueResponse) {}

  // Provides a value for each key request
  rpc GetValue (GetValueRequest) returns (Value) {}

  // Provides a value for each key request
  rpc SetValue (SetValueRequest) returns (SetValueResponse) {}

  // Transact performs a series of operations within a single transaction.
  rpc Transact(stream TransactRequest) returns (stream TransactResponse) {}
}

// A series of TransactRequest is sent to the server as part of the Transact
// streaming RPC.
message TransactRequest {
  // An identifier used to identify the request.
  string request_id = 1;
  oneof action {
    GetValueRequest get_value_request = 2;
    HasValueRequest has_value_request = 3;
    SetValueRequest set_value_request = 4;
    // Commit the transaction. After this call, no more actions are allowed.
    CommitRequest commit_request = 5;
    
    // Abort the transaction.
    AbortRequest abort_request = 6;
  }

  message CommitRequest {}
  message AbortRequest {}
}

// A series of TransactResponse is returned by the server as part of the Transact
// streaming RPC.
message TransactResponse {
  // The id of the corresponding request from the client. This allows the server
  // to respond to the client out of order.
  string request_id = 1;

  oneof response {
    Value get_value_response = 2;
    HasValueResponse has_value_response = 3;
    SetValueResponse set_value_response = 4;
    CommitResponse commit_response = 5;
    AbortResponse abort_response = 6;
  }

  message CommitResponse {}
  message AbortResponse {}
}

// The request message containing the key
message SetValueRequest {
  // Key to set.
  Key key = 1;
  // Value to set.
  Value value = 2;

  // Uniquely identifies the database or table instance to the server.
  string database_name = 3;

  // Specifies whether the key should be overwritten if a value alredy exists.
  // If unspecified, defaults to true. 
  optional bool overwrite = 4;
}

// The response message containing the value associated with the key
message SetValueResponse {}

// The type used for all keys in the database.
message Key {
  bytes key_bytes = 1;
}

// The type used for all values in the database.
message Value {
  bytes value_bytes = 1;
}

// The request message containing the key.
message GetValueRequest {
  Key key = 1;
}

// The request message containing the key.
message HasValueRequest {
  Key key = 1;
}

// The response message indicates whether the key exists in the key/value set.
message HasValueResponse {
  bool entry_exists = 1;
}
